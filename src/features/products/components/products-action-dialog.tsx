'use client'

import { z } from 'zod'
import { useForm } from 'react-hook-form'
import { zodResolver } from '@hookform/resolvers/zod'
import { showSubmittedData } from '@/utils/show-submitted-data'
import { Button } from '@/components/ui/button'
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
} from '@/components/ui/dialog'
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from '@/components/ui/form'
import { Input } from '@/components/ui/input'
import { Textarea } from '@/components/ui/textarea'
import { SelectDropdown } from '@/components/select-dropdown'
import { Checkbox } from '@/components/ui/checkbox'
import { Badge } from '@/components/ui/badge'
import { Separator } from '@/components/ui/separator'
import { Product } from '../data/schema'
import { Package, DollarSign, Star, Warehouse, Shield, Truck, RotateCcw, Image, Tag, Info } from 'lucide-react'

// Product categories - you can customize these based on your needs
const productCategories = [
  { label: 'Electronics', value: 'electronics' },
  { label: 'Clothing', value: 'clothing' },
  { label: 'Home & Garden', value: 'home-garden' },
  { label: 'Sports', value: 'sports' },
  { label: 'Books', value: 'books' },
  { label: 'Beauty', value: 'beauty' },
  { label: 'Automotive', value: 'automotive' },
  { label: 'Toys', value: 'toys' },
]

const availabilityStatuses = [
  { label: 'In Stock', value: 'In Stock' },
  { label: 'Low Stock', value: 'Low Stock' },
  { label: 'Out of Stock', value: 'Out of Stock' },
]

const formSchema = z.object({
  title: z.string().min(1, { message: 'Title is required.' }),
  description: z.string().min(1, { message: 'Description is required.' }),
  category: z.string().min(1, { message: 'Category is required.' }),
  price: z.coerce.number().min(0.01, { message: 'Price must be greater than 0.' }),
  discountPercentage: z.coerce.number().min(0).max(100, { message: 'Discount must be between 0 and 100.' }),
  rating: z.coerce.number().min(0).max(5, { message: 'Rating must be between 0 and 5.' }),
  stock: z.coerce.number().int().min(0, { message: 'Stock must be a non-negative integer.' }),
  warrantyInformation: z.string().min(1, { message: 'Warranty information is required.' }),
  shippingInformation: z.string().min(1, { message: 'Shipping information is required.' }),
  availabilityStatus: z.string().min(1, { message: 'Availability status is required.' }),
  returnPolicy: z.string().min(1, { message: 'Return policy is required.' }),
  minimumOrderQuantity: z.coerce.number().int().min(1, { message: 'Minimum order quantity must be at least 1.' }),
  thumbnail: z.string().url('Must be a valid URL'),
  // images: z.string().transform((str) => {
  //   if (!str.trim()) return []
  //   return str.split(',').map(url => url.trim()).filter(url => url.length > 0)
  // }).pipe(z.array(z.string().url('Each image must be a valid URL'))),
  isActive: z.boolean(),
})

type ProductForm = z.infer<typeof formSchema>

interface Props {
  currentRow?: Product
  open: boolean
  onOpenChange: (open: boolean) => void
}

export function ProductsActionDialog({ currentRow, open, onOpenChange }: Props) {

     
  const getAllProductsCatgeory=()=>{
    
  }


  const isEdit = !!currentRow
  const form = useForm<ProductForm>({
    resolver: zodResolver(formSchema),
    defaultValues: isEdit
      ? {
        title: currentRow.title,
        description: currentRow.description,
        category: currentRow.category,
        price: currentRow.price,
        discountPercentage: currentRow.discountPercentage,
        rating: currentRow.rating,
        stock: currentRow.stock,
        warrantyInformation: currentRow.warrantyInformation,
        shippingInformation: currentRow.shippingInformation,
        availabilityStatus: currentRow.availabilityStatus,
        returnPolicy: currentRow.returnPolicy,
        minimumOrderQuantity: currentRow.minimumOrderQuantity,
        thumbnail: currentRow.thumbnail,
        // images: currentRow.images.join(', '),
        isActive: currentRow.isActive,
      }
      : {
        title: '',
        description: '',
        category: '',
        price: 0,
        discountPercentage: 0,
        rating: 0,
        stock: 0,
        warrantyInformation: '',
        shippingInformation: '',
        availabilityStatus: '',
        returnPolicy: '',
        minimumOrderQuantity: 1,
        thumbnail: '',
        //  images: '',
        isActive: true,
      },
  })

  const onSubmit = (values: ProductForm) => {
    // Transform the form data to match the Product schema
    const productData = {
      ...values,
      _id: isEdit ? currentRow!._id : '', // Will be generated by backend
      createdAt: isEdit ? currentRow!.createdAt : new Date(),
      updatedAt: new Date(),
    }

    form.reset()
    showSubmittedData(productData)
    onOpenChange(false)
  }

  return (
    <Dialog
      open={open}
      onOpenChange={(state) => {
        form.reset()
        onOpenChange(state)
      }}
    >
      <DialogContent className='max-w-4xl max-h-[90vh] overflow-hidden'>
        <DialogHeader className='space-y-3 pb-6'>
          <div className='flex items-center gap-3'>
            <div className='p-2 bg-primary/10 rounded-lg'>
              <Package className='h-5 w-5 text-primary' />
            </div>
            <div>
              <DialogTitle className='text-xl font-semibold'>
                {isEdit ? 'Edit Product' : 'Add New Product'}
              </DialogTitle>
              <DialogDescription className='text-sm text-muted-foreground mt-1'>
                {isEdit ? 'Update product information and save changes.' : 'Fill in the details to create a new product.'}
              </DialogDescription>
            </div>
          </div>
        </DialogHeader>

        <div className='overflow-y-auto max-h-[calc(90vh-200px)] pr-2'>
          <Form {...form}>
            <form
              id='product-form'
              onSubmit={form.handleSubmit(onSubmit)}
              className='space-y-8'
            >
              {/* Basic Information Section */}
              <div className='space-y-6'>
                <div className='flex items-center gap-2 text-sm font-medium text-foreground'>
                  <Info className='h-4 w-4' />
                  Basic Information
                </div>

               <div className='grid grid-cols-1 md:grid-cols-2 gap-6'>
  <FormField
    control={form.control}
    name='title'
    render={({ field }) => (
      <FormItem className='space-y-2'>
        <FormLabel className='text-sm font-medium'>Product Title</FormLabel>
        <FormControl>
          <Input
            placeholder='Enter product title'
            className='h-10' // Ensure height matches the dropdown
            {...field}
          />
        </FormControl>
        <FormMessage />
      </FormItem>
    )}
  />

  <FormField
    control={form.control}
    name='category'
    render={({ field }) => (
      <FormItem className='space-y-2'>
        <FormLabel className='text-sm font-medium flex items-center gap-2'>
          <Tag className='h-4 w-4' />
          Category
        </FormLabel>
        <div className="h-10"> {/* Force same height as Input */}
          <SelectDropdown
            defaultValue={field.value}
            onValueChange={field.onChange}
            placeholder='Select category'
            items={productCategories}
            className='h-full w-full' // ensure full usage of div height
          />
        </div>
        <FormMessage />
      </FormItem>
    )}
  />
</div>


                <FormField
                  control={form.control}
                  name='description'
                  render={({ field }) => (
                    <FormItem className='space-y-2'>
                      <FormLabel className='text-sm font-medium'>Description</FormLabel>
                      <FormControl>
                        <Textarea
                          placeholder='Describe your product in detail...'
                          className='min-h-[100px] resize-none'
                          {...field}
                        />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />
              </div>

              <Separator />

              {/* Pricing & Stock Section */}
              <div className='space-y-6'>
                <div className='flex items-center gap-2 text-sm font-medium text-foreground'>
                  <DollarSign className='h-4 w-4' />
                  Pricing & Inventory
                </div>

                <div className='grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4'>
                  <FormField
                    control={form.control}
                    name='price'
                    render={({ field }) => (
                      <FormItem className='space-y-2'>
                        <FormLabel className='text-sm font-medium'>Price ($)</FormLabel>
                        <FormControl>
                          <Input
                            type='number'
                            step='0.01'
                            placeholder='0.00'
                            className='h-10'
                            {...field}
                          />
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />

                  <FormField
                    control={form.control}
                    name='discountPercentage'
                    render={({ field }) => (
                      <FormItem className='space-y-2'>
                        <FormLabel className='text-sm font-medium'>Discount (%)</FormLabel>
                        <FormControl>
                          <Input
                            type='number'
                            min='0'
                            max='100'
                            placeholder='0'
                            className='h-10'
                            {...field}
                          />
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />

                  <FormField
                    control={form.control}
                    name='stock'
                    render={({ field }) => (
                      <FormItem className='space-y-2'>
                        <FormLabel className='text-sm font-medium flex items-center gap-2'>
                          <Warehouse className='h-4 w-4' />
                          Stock
                        </FormLabel>
                        <FormControl>
                          <Input
                            type='number'
                            min='0'
                            placeholder='0'
                            className='h-10'
                            {...field}
                          />
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />

                  <FormField
                    control={form.control}
                    name='minimumOrderQuantity'
                    render={({ field }) => (
                      <FormItem className='space-y-2'>
                        <FormLabel className='text-sm font-medium'>Min Order</FormLabel>
                        <FormControl>
                          <Input
                            type='number'
                            min='1'
                            placeholder='1'
                            className='h-10'
                            {...field}
                          />
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                </div>

                <div className='grid grid-cols-1 md:grid-cols-2 gap-6'>
                  <FormField
                    control={form.control}
                    name='rating'
                    render={({ field }) => (
                      <FormItem className='space-y-2'>
                        <FormLabel className='text-sm font-medium flex items-center gap-2'>
                          <Star className='h-4 w-4' />
                          Rating (0-5)
                        </FormLabel>
                        <FormControl>
                          <Input
                            type='number'
                            step='0.1'
                            min='0'
                            max='5'
                            placeholder='0.0'
                            className='h-10'
                            {...field}
                          />
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />

                  <FormField
                    control={form.control}
                    name='availabilityStatus'
                    render={({ field }) => (
                      <FormItem className='space-y-2'>
                        <FormLabel className='text-sm font-medium'>Availability Status</FormLabel>
                        <SelectDropdown
                          defaultValue={field.value}
                          onValueChange={field.onChange}
                          placeholder='Select availability'
                          items={availabilityStatuses}
                        />
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                </div>
              </div>

              <Separator />

              {/* Product Policies Section */}
              <div className='space-y-6'>
                <div className='flex items-center gap-2 text-sm font-medium text-foreground'>
                  <Shield className='h-4 w-4' />
                  Policies & Information
                </div>

                <div className='grid grid-cols-1 md:grid-cols-2 gap-6'>
                  <FormField
                    control={form.control}
                    name='warrantyInformation'
                    render={({ field }) => (
                      <FormItem className='space-y-2'>
                        <FormLabel className='text-sm font-medium flex items-center gap-2'>
                          <Shield className='h-4 w-4' />
                          Warranty Information
                        </FormLabel>
                        <FormControl>
                          <Input
                            placeholder='e.g., 1 year limited warranty'
                            className='h-10'
                            {...field}
                          />
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />

                  <FormField
                    control={form.control}
                    name='shippingInformation'
                    render={({ field }) => (
                      <FormItem className='space-y-2'>
                        <FormLabel className='text-sm font-medium flex items-center gap-2'>
                          <Truck className='h-4 w-4' />
                          Shipping Information
                        </FormLabel>
                        <FormControl>
                          <Input
                            placeholder='e.g., Ships in 1-2 business days'
                            className='h-10'
                            {...field}
                          />
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                </div>

                <FormField
                  control={form.control}
                  name='returnPolicy'
                  render={({ field }) => (
                    <FormItem className='space-y-2'>
                      <FormLabel className='text-sm font-medium flex items-center gap-2'>
                        <RotateCcw className='h-4 w-4' />
                        Return Policy
                      </FormLabel>
                      <FormControl>
                        <Input
                          placeholder='e.g., 30 days return policy with original receipt'
                          className='h-10'
                          {...field}
                        />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />
              </div>

              <Separator />

              {/* Media Section */}
              <div className='space-y-6'>
                <div className='flex items-center gap-2 text-sm font-medium text-foreground'>
                  <Image className='h-4 w-4' />
                  Product Media
                </div>

                <div className='space-y-6'>
                  <FormField
                    control={form.control}
                    name='thumbnail'
                    render={({ field }) => (
                      <FormItem className='space-y-2'>
                        <FormLabel className='text-sm font-medium'>Thumbnail Image URL</FormLabel>
                        <FormControl>
                          <Input
                            placeholder='https://example.com/thumbnail.jpg'
                            className='h-10'
                            {...field}
                          />
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />

                  {/* <FormField
                    control={form.control}
                    name='images'
                    render={({ field }) => (
                      <FormItem className='space-y-2'>
                        <FormLabel className='text-sm font-medium'>Additional Images</FormLabel>
                        <FormControl>
                          <Textarea
                            placeholder='Enter multiple image URLs separated by commas&#10;https://example.com/image1.jpg, https://example.com/image2.jpg'
                            className='min-h-[80px] resize-none'
                            {...field}
                          />
                        </FormControl>
                        <div className='text-xs text-muted-foreground'>
                          Separate multiple URLs with commas
                        </div>
                        <FormMessage />
                      </FormItem>
                    )}
                  /> */}
                </div>
              </div>

              <Separator />

              {/* Status Section */}
              <div className='space-y-4'>
                <FormField
                  control={form.control}
                  name='isActive'
                  render={({ field }) => (
                    <FormItem className='flex items-center justify-between rounded-lg border p-4 space-y-0'>
                      <div className='space-y-1'>
                        <FormLabel className='text-sm font-medium'>Product Status</FormLabel>
                        <div className='text-sm text-muted-foreground'>
                          Enable this product to be visible and available for purchase
                        </div>
                      </div>
                      <FormControl>
                        <div className='flex items-center gap-2'>
                          <Checkbox
                            checked={field.value}
                            onCheckedChange={field.onChange}
                          />
                          {field.value ? (
                            <Badge variant="default" className='bg-green-100 text-green-800 hover:bg-green-100'>
                              Active
                            </Badge>
                          ) : (
                            <Badge variant="secondary">
                              Inactive
                            </Badge>
                          )}
                        </div>
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />
              </div>
            </form>
          </Form>
        </div>

        <DialogFooter className='pt-6 border-t'>
          <Button
            type='button'
            variant='outline'
            onClick={() => onOpenChange(false)}
            className='mr-auto'
          >
            Cancel
          </Button>
          <Button type='submit' form='product-form' className='min-w-[120px]'>
            {isEdit ? 'Update Product' : 'Create Product'}
          </Button>
        </DialogFooter>
      </DialogContent>
    </Dialog>
  )
}